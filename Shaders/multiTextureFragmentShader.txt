#version 430

in vec3 position_eye;
in vec3 normal_eye;
in vec3 light_position_eye; 
in vec3 camPos;
in vec2 texture_coordinates;


uniform sampler2D texture_primary;
uniform sampler2D basic_texture2;

//************//
//OBJECT COLOR//
//************//
uniform vec3 Ks;
uniform vec3 Kd;
uniform vec3 Ka;
uniform float specular_exponent;

//***********//
//LIGHT COLOR//
//***********//
uniform vec3 Ls; //white specular color
uniform vec3 Ld; // dull white diffuse light 
uniform vec3 La;  // grey ambient color


out vec4 frag_color;
void main()
{    

    //ambient
    vec3 Ia = La;
    
	//diffuse
	vec3 norm = normalize(normal_eye);
	vec3 direction_to_light_eye = normalize(light_position_eye - position_eye);
	float diff = max(dot(norm, direction_to_light_eye), 0.0);
    vec3 Id = Ld * diff;
    
    //Specular Intensity
	vec3 viewDir = normalize(camPos - position_eye);
	vec3 halfwayDir = normalize(direction_to_light_eye + viewDir);
	float spec = pow(max(dot(normal_eye, halfwayDir), 0.0), 32);
	vec3 Is = specular_exponent * spec * Ls;
    
	vec3 color = Is + Id + Ia;
    frag_color = vec4(color, 1.0);
	frag_color *= texture(basic_texture2, texture_coordinates);
}